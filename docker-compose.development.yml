version: "3.8"

services:
  backend:
    build:
      context: ./back-end
    ports:
      - "4000:4000"
    depends_on:
      - db
      - rabbitmq
    env_file:
      - ./back-end/.env
    networks:
      - app-network
    restart: always
  
  go-service:
    build:
      context: ./go-service
    container_name: go-service
    env_file:
      - ./go-service/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - worker-network
    restart: always

  frontend:
    build:
      context: ./front-end
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: always

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: task_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
      - worker-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  app-network:
    driver: bridge
  worker-network:
    driver: bridge

volumes:
  postgres_data: