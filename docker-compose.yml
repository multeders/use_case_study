version: "3.8"

services:
  backend:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY_NAME}-backend:latest
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "4000:4000"
    depends_on:
      - db
      - rabbitmq
    networks:
      - app-network
    restart: always
  
  go-service:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY_NAME}-go-service:latest
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - worker-network
    restart: always

  frontend:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY_NAME}-frontend:latest
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: always

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - app-network
      - worker-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  app-network:
    driver: bridge
  worker-network:
    driver: bridge

volumes:
  postgres_data: